// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	model "github.com/VladPetriv/scanner_backend_api/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// WebUserService is an autogenerated mock type for the WebUserService type
type WebUserService struct {
	mock.Mock
}

// ComparePassword provides a mock function with given fields: password, HashPassword
func (_m *WebUserService) ComparePassword(password string, HashPassword string) bool {
	ret := _m.Called(password, HashPassword)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(password, HashPassword)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CreateWebUser provides a mock function with given fields: user
func (_m *WebUserService) CreateWebUser(user *model.WebUser) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.WebUser) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetWebUserByEmail provides a mock function with given fields: email
func (_m *WebUserService) GetWebUserByEmail(email string) (*model.WebUser, error) {
	ret := _m.Called(email)

	var r0 *model.WebUser
	if rf, ok := ret.Get(0).(func(string) *model.WebUser); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.WebUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HashPassword provides a mock function with given fields: passoword
func (_m *WebUserService) HashPassword(passoword string) (string, error) {
	ret := _m.Called(passoword)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(passoword)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(passoword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewWebUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewWebUserService creates a new instance of WebUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWebUserService(t mockConstructorTestingTNewWebUserService) *WebUserService {
	mock := &WebUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
