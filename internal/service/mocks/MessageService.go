// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	model "github.com/VladPetriv/scanner_backend_api/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// MessageService is an autogenerated mock type for the MessageService type
type MessageService struct {
	mock.Mock
}

// CreateMessage provides a mock function with given fields: message
func (_m *MessageService) CreateMessage(message *model.MessageDTO) (int, error) {
	ret := _m.Called(message)

	var r0 int
	if rf, ok := ret.Get(0).(func(*model.MessageDTO) int); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.MessageDTO) error); ok {
		r1 = rf(message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFullMessageByID provides a mock function with given fields: ID
func (_m *MessageService) GetFullMessageByID(ID int) (*model.FullMessage, error) {
	ret := _m.Called(ID)

	var r0 *model.FullMessage
	if rf, ok := ret.Get(0).(func(int) *model.FullMessage); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.FullMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFullMessagesByChannelIDAndPage provides a mock function with given fields: ID, offset
func (_m *MessageService) GetFullMessagesByChannelIDAndPage(ID int, offset int) ([]model.FullMessage, error) {
	ret := _m.Called(ID, offset)

	var r0 []model.FullMessage
	if rf, ok := ret.Get(0).(func(int, int) []model.FullMessage); ok {
		r0 = rf(ID, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.FullMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(ID, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFullMessagesByPage provides a mock function with given fields: offset
func (_m *MessageService) GetFullMessagesByPage(offset int) ([]model.FullMessage, error) {
	ret := _m.Called(offset)

	var r0 []model.FullMessage
	if rf, ok := ret.Get(0).(func(int) []model.FullMessage); ok {
		r0 = rf(offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.FullMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFullMessagesByUserID provides a mock function with given fields: ID
func (_m *MessageService) GetFullMessagesByUserID(ID int) ([]model.FullMessage, error) {
	ret := _m.Called(ID)

	var r0 []model.FullMessage
	if rf, ok := ret.Get(0).(func(int) []model.FullMessage); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.FullMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessagesCount provides a mock function with given fields:
func (_m *MessageService) GetMessagesCount() (int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessagesCountByChannelID provides a mock function with given fields: ID
func (_m *MessageService) GetMessagesCountByChannelID(ID int) (int, error) {
	ret := _m.Called(ID)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMessageService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMessageService creates a new instance of MessageService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMessageService(t mockConstructorTestingTNewMessageService) *MessageService {
	mock := &MessageService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
